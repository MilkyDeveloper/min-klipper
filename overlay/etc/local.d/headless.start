#!/bin/sh

# shellcheck disable=SC2059

set -ex

{

# Some code adapted from:
# https://github.com/macmpi/alpine-linux-headless-bootstrap/blob/main/overlay/etc/local.d/headless.start

# Location of the overlay
OVERLAY=$( find /media -type d -path '*/.*' -prune -o -type f -name '*.apkovl.tar.gz' -exec dirname {} \; | head -1 )

# Import configuration file
# shellcheck disable=SC1091
if [ -f "/overlay.config" ]; then
	. /overlay.config
elif [ -f "$OVERLAY/overlay.config" ]; then
	. "$OVERLAY/overlay.config"
else
	echo "No configuration file found, exiting"
	exit 1
fi

# Setup Network interfaces
if [ "$METHOD" = "wifi" ]; then
	apk add wpa_supplicant
	cat <<-EOF >> /etc/wpa_supplicant/wpa_supplicant.conf
	country=$COUNTRY

	network={
		key_mgmt=WPA-PSK
		ssid="$SSID"
		psk="$PSK"
	}
	EOF

	# shellcheck disable=SC2086
	logger -st ${0##*/} "VARIABLES: COUNTRY=$COUNTRY SSID=$SSID PSK=$PSK"
fi

# Cloudflare DNS
cat << EOF > /etc/resolv.conf
nameserver 1.1.1.1
nameserver 1.0.0.1
EOF

# Populate network interfaces
# TODO: We don't need to do this with IWD
# EnableNetworkConfiguration=true
# This antiquated case statement is kept for reference
true > /etc/network/interfaces # Clear the file
for DEV in /sys/class/net/*; do
	DEV=${DEV##*/} # Only use the last part of the path
	case $DEV in
		# lo*)
		# 	cat <<- EOF >> /etc/network/interfaces
		# 	auto $DEV
		# 	iface $DEV inet loopback
		# 	EOF
		# ;;
		# eth*)
		# 	cat <<- EOF >> /etc/network/interfaces
		# 	auto $DEV
		# 	iface $DEV inet dhcp
		# 	EOF
		# ;;
		wlan*|eth*|lo*)	
			# Don't unnecessarily add a wifi interface
			# [ "$METHOD" = "wifi" ] && cat <<- EOF >> /etc/network/interfaces
			# auto $DEV
			# iface $DEV inet dhcp
			# EOF
			# [ "$METHOD" = "wifi" ] && setup-interfaces -a
			setup-interfaces -a
		;;
		# usb*)
		# 	# Retained from the original repo
		# 	# I'm not exactly sure how this works
		# 	cat <<- EOF >> /etc/network/interfaces
		# 	auto $DEV
		# 	iface $DEV inet static
		# 		address 10.42.0.2/24
		# 		gateway 10.42.0.1
		# 	EOF

		# 	cat <<- EOF > /etc/resolv.conf
		# 	nameserver 208.67.222.222
		# 	nameserver 208.67.220.220
		# 	EOF
		# ;;
	esac
done

# Update hostname
#echo "$NEW_HOSTNAME" > /etc/hostname
# Set hostname
#hostname -F /etc/hostname

# Intialize network services
[ "$METHOD" = "wifi" ] && rc-service wpa_supplicant start
rc-service networking start

# Setup temporary SSH server (root logins, no password)
# we use some bundled keys to avoid generation at boot and save time
# bundled temporary keys are moved in /tmp so they won't be stored
# within permanent config later (new ones will then be generated)
apk add openssh figlet ncurses bash mingetty newt

# Generate RSA key
rm /etc/ssh/*key || true
rm /etc/ssh/*key.pub || true
ssh-keygen -A

# Allow empty passwords for the root login
cp /etc/ssh/sshd_config /etc/ssh/sshd_config.old
cat <<-EOF >> /etc/ssh/sshd_config
AuthenticationMethods none
PermitEmptyPasswords yes
PermitRootLogin yes
HostKey /etc/ssh/ssh_host_ed25519_key
HostKey /etc/ssh/ssh_host_rsa_key
EOF

# Disable key generation
cp /etc/conf.d/sshd /etc/conf.d/sshd.old
cat <<-EOF >> /etc/conf.d/sshd
sshd_disable_keygen=yes
EOF

# The DNS gets overwritten somewhere in the process
cat << EOF > /etc/resolv.conf
nameserver 1.1.1.1
nameserver 1.0.0.1
EOF

rc-service sshd start

# TODO: change mmcblk0p1 to sda (e.g.) if booted off a USB
cat << EOF > /etc/apk/repositories
/media/mmcblk0p1/apks
http://dl-cdn.alpinelinux.org/alpine/edge/main/
http://dl-cdn.alpinelinux.org/alpine/edge/community/
EOF

# Make all setup files executable
chmod +x /sbin/minklipper.*

# Set up the USB gadget
(
	# Load gadget modules
	modprobe libcomposite usb_f_acm

	# General USB gadget setup
	cd /sys/kernel/config/usb_gadget/
	mkdir -p gadget
	cd gadget
	echo 0x1d6b > idVendor # Linux Foundation
	echo 0x0104 > idProduct # Multifunction Composite Gadget
	echo 0x0100 > bcdDevice # v1.0.0
	echo 0x0200 > bcdUSB # USB2
	mkdir -p strings/0x409
	echo "01234567890" > strings/0x409/serialnumber
	echo "MilkyDeveloper" > strings/0x409/manufacturer
	echo "MinKlipper Installer" > strings/0x409/product
	mkdir -p configs/c.1/strings/0x409
	echo "Config 1: ECM network" > configs/c.1/strings/0x409/configuration
	echo 250 > configs/c.1/MaxPower

	# Set up serial gadget
	mkdir -p functions/acm.usb0
	ln -s functions/acm.usb0 configs/c.1/

	# Commit changes
	ls /sys/class/udc > UDC

	# Run getty on the serial gadget
	# printf "$(clear; tput setaf 6)$(figlet "IP ADRESS")$(tput sgr0)\n$(ip a)\n" > /dev/ttyGS0
	# printf "$(tput setaf 5)$(figlet "MODULES")$(tput sgr0)\n$(lsmod)\n" > /dev/ttyGS0
	# printf "$(tput setaf 4)$(figlet "KERNEL")$(tput sgr0)\n$(dmesg)\n" > /dev/ttyGS0
	#setsid /sbin/getty -L ttyGS0 115200 vt100 &
	#setsid /sbin/minklipper-install > /dev/ttyGS0 2>&1

	# First boot on new install
	if [ -f "/root/minklipper.env" ]; then
		setsid /sbin/mingetty --autologin root --loginprog /sbin/minklipper.login2 ttyGS0 115200 vt100 &
	# Fully configured system
	elif [ -f "/etc/minklipper-install-done" ]; then
		setsid /sbin/mingetty --autologin root ttyGS0 115200 vt100 &
	# First boot on a fresh SD card
	else
		setsid /sbin/mingetty --autologin root --loginprog /sbin/minklipper.login ttyGS0 115200 vt100 &
	fi
	
)

} > /var/log/minklipper 2>/var/log/minklipper2